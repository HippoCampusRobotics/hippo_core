#!/usr/bin/env python3

# Copyright (C) 2023-2024 Thies Lennart Alff
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA

import threading
import time

import pigpio
import rclpy
from rcl_interfaces.msg import (
    IntegerRange,
    ParameterDescriptor,
    ParameterType,
    SetParametersResult,
)
from rclpy.node import Node
from rclpy.parameter import Parameter
from std_msgs.msg import Float64
from std_srvs.srv import Trigger, Trigger_Request, Trigger_Response


class SpotLight(Node):
    def __init__(self, node_name):
        super().__init__(node_name=node_name)
        self.timed_out = False

        self.pi = pigpio.pi()
        self.spotlight_pin = 21

        descr = ParameterDescriptor()
        range = IntegerRange()
        range.from_value = 0
        range.to_value = 100
        range.step = 1
        descr.integer_range = [range]
        descr.type = ParameterType.PARAMETER_INTEGER
        self.declare_parameter('brightness', 50, descr)
        self.add_on_set_parameters_callback(self.on_parameters)
        self.brightness_sub = self.create_subscription(
            Float64, '~/brightness', self.on_brightness, 10
        )

        self.startup_service = self.create_service(
            Trigger, '~/startup_sequence', self.serve_startup_sequence
        )
        self.startup_sequence_thread = None

    def serve_startup_sequence(
        self, _: Trigger_Request, response: Trigger_Response
    ):
        self.get_logger().info('Serving startup sequence')
        if self.startup_sequence_thread is not None:
            if self.startup_sequence_thread.is_alive():
                response.success = False
                return response
        self.startup_sequence_thread = threading.Thread(
            target=self.startup_sequence
        )
        self.startup_sequence_thread.start()
        response.success = True
        return response

    def startup_sequence(self):
        t_start = self.get_clock().now()
        toggle = False
        self.get_logger().info('Starting startup sequence.')
        while True:
            t_now = self.get_clock().now()
            dt: rclpy.duration.Duration = t_now - t_start
            if dt >= rclpy.duration.Duration(seconds=2):
                break
            val = 1.0 - int(toggle)
            self.set_servo(val)
            toggle = not toggle
            time.sleep(0.1)
        self.set_servo(0.0)

    def on_parameters(self, params):
        for param in params:
            if param.name == 'brightness':
                self.set_servo(param.value / 100.0)
        return SetParametersResult(successful=True)

    def set_servo(self, value: float):
        val = 1100 + value * 800.0
        val = min(1900, max(1100, val))
        self.pi.set_servo_pulsewidth(self.spotlight_pin, val)

    def on_shutdown(self):
        self.pi.set_servo_pulsewidth(self.spotlight_pin, 0)

    def on_brightness(self, msg: Float64):
        value = min(1.0, max(0.0, msg.data))
        self.set_servo(value)
        param = Parameter(
            'brightness', Parameter.Type.INTEGER, int(value * 100.0)
        )
        self.set_parameters([param])


def main():
    rclpy.init()
    node = SpotLight('spotlight')
    try:
        rclpy.spin(node)
    except Exception as e:
        print(f'{e}')
    finally:
        node.on_shutdown()


if __name__ == '__main__':
    main()
