#!/usr/bin/env python3

# Copyright (C) 2023 Thies Lennart Alff
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA

import rclpy
from rclpy.node import Node
from hippo_msgs.msg import NewtonGripperCommand
import pigpio


class NewtonGripper(Node):

    def __init__(self, node_name):
        super().__init__(node_name=node_name)
        self.timed_out = False

        self.pi = pigpio.pi()
        self.gripper_pin = 18
        self.command_timeout = 0.5

        self.timeout_timer = self.create_timer(self.command_timeout,
                                               self.on_timeout)

        self.command_sub = self.create_subscription(NewtonGripperCommand,
                                                    'gripper_command',
                                                    self.on_gripper_command,
                                                    10)

    def on_gripper_command(self, msg: NewtonGripperCommand):
        self.timeout_timer.reset()
        if self.timed_out:
            self.timed_out = False
            self.get_logger().info(
                f'"{self.command_sub.topic_name}" not timed out anymore')
        if msg.action == NewtonGripperCommand.ACTION_CLOSE:
            self.close_gripper()
        elif msg.action == NewtonGripperCommand.ACTION_OPEN:
            self.open_gripper()
        elif msg.action == NewtonGripperCommand.ACTION_NONE:
            self.stop_gripper()
        else:
            self.get_logger().warning(
                f'Received unhandled action: {msg.action}')

    def open_gripper(self):
        self.pi.set_servo_pulsewidth(self.gripper_pin, 1800)

    def close_gripper(self):
        self.pi.set_servo_pulsewidth(self.gripper_pin, 1200)

    def stop_gripper(self):
        self.pi.set_servo_pulsewidth(self.gripper_pin, 1500)

    def on_timeout(self):
        self.timed_out = True
        self.stop_gripper()
        self.timeout_timer.cancel()

    def on_shutdown(self):
        self.pi.set_servo_pulsewidth(self.gripper_pin, 0)


def main():
    rclpy.init()
    node = NewtonGripper('gripper')
    try:
        rclpy.spin(node)
    except Exception as e:
        print(f'{e}')
    finally:
        node.on_shutdown()


if __name__ == '__main__':
    main()
