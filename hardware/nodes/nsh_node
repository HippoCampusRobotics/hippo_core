#!/usr/bin/env python3

# Copyright (C) 2023 Thies Lennart Alff
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA

import rclpy
from rclpy.node import Node
from serial import Serial
from serial.serialutil import SerialException
from std_srvs.srv import Trigger, Trigger_Request, Trigger_Response


class NSHNode(Node):
    def __init__(self):
        super().__init__(node_name='nsh_node')
        self.serial_port: Serial = None
        self.ekf2_restart_service = self.create_service(
            Trigger, 'ekf2_restart', self.serve_ekf2_restart
        )
        self.fcu_reboot_service = self.create_service(
            Trigger, 'fcu_reboot', self.serve_fcu_reboot
        )

    def open_serial_port(self):
        try:
            self.serial_port = Serial('/dev/fcu_debug', 57600, timeout=0.5)
        except SerialException:
            self.serial_port = None
            return False
        return True

    def serve_fcu_reboot(self, _: Trigger_Request, response: Trigger_Response):
        if self.serial_port is None:
            self.open_serial_port()
        if self.serial_port is None:
            response.success = False
            response.message = 'Serial port not available'
            return response
        self.serial_port.write(b'reboot\r')
        self.serial_port.flush()
        response.success = True
        response.message = 'Rebooted FCU.'
        return response

    def serve_ekf2_restart(
        self, _: Trigger_Request, response: Trigger_Response
    ):
        if self.serial_port is None:
            self.open_serial_port()

        if self.serial_port is None:
            response.success = False
            response.message = 'Serial port not available'
            return response

        self.serial_port.write(b'ekf2 stop\r')
        self.serial_port.flush()
        self.serial_port.write(b'ekf2 start\r')
        self.serial_port.flush()
        response.success = True
        response.message = 'Restarted EKF2'
        return response


def main():
    rclpy.init()
    node = NSHNode()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass


if __name__ == '__main__':
    main()
