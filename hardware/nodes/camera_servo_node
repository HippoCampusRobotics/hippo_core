#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from rclpy.parameter import Parameter
import pigpio
from std_msgs.msg import Float64
from rcl_interfaces.msg import (SetParametersResult, ParameterDescriptor,
                                ParameterType, IntegerRange)


class CameraServo(Node):

    def __init__(self, node_name):
        super().__init__(node_name=node_name)
        self.timed_out = False

        self.pi = pigpio.pi()
        self.camera_servo_pin = 20

        descr = ParameterDescriptor()
        range = IntegerRange()
        range.from_value = 0
        range.to_value = 100
        range.step = 1
        descr.integer_range = [range]
        descr.type = ParameterType.PARAMETER_INTEGER
        self.declare_parameter('tilt', 50, descr)
        self.add_on_set_parameters_callback(self.on_parameters)
        self.tilt_sub = self.create_subscription(Float64, '~/tilt',
                                                 self.on_tilt, 10)

    def on_parameters(self, params):
        for param in params:
            if param.name == 'tilt':
                self.set_servo(param.value / 100.0)
        return SetParametersResult(successful=True)

    def set_servo(self, value: float):
        val = 1100 + value * 800.0
        val = min(1900, max(1100, val))
        self.pi.set_servo_pulsewidth(self.camera_servo_pin, val)

    def on_shutdown(self):
        self.pi.set_servo_pulsewidth(self.camera_servo_pin, 0)

    def on_tilt(self, msg: Float64):
        value = min(1.0, max(0.0, msg.data))
        self.set_servo(value)
        param = Parameter('tilt', Parameter.Type.INTEGER, int(value * 100.0))
        self.set_parameters([param])


def main():
    rclpy.init()
    node = CameraServo('camera_servo')
    try:
        rclpy.spin(node)
    except Exception as e:
        print(f'{e}')
    finally:
        node.on_shutdown()


if __name__ == '__main__':
    main()
